// Generated by CoffeeScript 1.9.3
var DTMF;

DTMF = function(samplerate, peakFilterSensitivity, repeatMin, downsampleRate, threshold) {
  var key;
  var key, self;
  self = this;
  self.peakFilterSensitivity = peakFilterSensitivity;
  self.downsampleRate = downsampleRate || 1;
  self.samplerate = samplerate / self.downsampleRate;
  self.frequencyTable = {
    697: {
      1209: '1',
      1336: '2',
      1477: '3',
      1633: 'A'
    },
    770: {
      1209: '4',
      1336: '5',
      1477: '6',
      1633: 'B'
    },
    852: {
      1209: '7',
      1336: '8',
      1477: '9',
      1633: 'C'
    },
    941: {
      1209: '*',
      1336: '0',
      1477: '#',
      1633: 'D'
    }
  };
  self.lowFrequencies = [];
  for (key in self.frequencyTable) {
    self.lowFrequencies.push(parseInt(key));
  }
  self.highFrequencies = [];
  for (key in self.frequencyTable[self.lowFrequencies[0]]) {
    self.highFrequencies.push(parseInt(key));
  }
  self.allFrequencies = self.lowFrequencies.concat(self.highFrequencies);
  self.threshold = threshold || 0;
  self.repeatCounter = 0;
  self.firstPreviousValue = '';
  self.goertzel = new Goertzel(self.allFrequencies, self.samplerate, self.threshold);
  self.repeatMin = repeatMin;
  self.energyProfileToCharacter = function(register) {
    var f;
    var i;
    var energies, f, highFrequency, highFrequencyEngergy, i, lowFrequency, lowFrequencyEnergy;
    energies = register.energies;
    highFrequency = 0.0;
    highFrequencyEngergy = 0.0;
    i = 0;
    while (i < self.highFrequencies.length) {
      f = self.highFrequencies[i];
      if (energies[f] > highFrequencyEngergy && energies[f] > self.threshold) {
        highFrequencyEngergy = energies[f];
        highFrequency = f;
      }
      i++;
    }
    lowFrequency = 0.0;
    lowFrequencyEnergy = 0.0;
    i = 0;
    while (i < self.lowFrequencies.length) {
      f = self.lowFrequencies[i];
      if (energies[f] > lowFrequencyEnergy && energies[f] > self.threshold) {
        lowFrequencyEnergy = energies[f];
        lowFrequency = f;
      }
      i++;
    }
    register = null;
    if (self.frequencyTable[lowFrequency] !== void 0) {
      return self.frequencyTable[lowFrequency][highFrequency] || null;
    }
  };
  self.floatBufferToInt = function(floatBuffer) {
    var i, intBuffer;
    intBuffer = [];
    i = 0;
    while (i < floatBuffer.length) {
      intBuffer.push(self.goertzel.floatToIntSample(floatBuffer[i]));
      i++;
    }
    return intBuffer;
  };
  self.processBuffer = function(buffer) {
    var i;
    var lowEnergies;
    var i;
    var highEnergies;
    var badPeaks, energy, f, freq, frequency, highEnergies, i, intSample, lowEnergies, register, value, windowedSample;
    value = '';
    intSample = void 0;
    register = void 0;
    windowedSample = void 0;
    energy = void 0;
    highEnergies = [];
    lowEnergies = [];
    frequency = void 0;
    i = 0;
    while (i < buffer.length) {
      intSample = buffer[i];
      windowedSample = self.goertzel.windowFunction(intSample, i, buffer.length / self.downsampleRate);
      register = self.goertzel.getEnergiesFromSample(windowedSample);
      value = self.energyProfileToCharacter(register);
      i += self.downsampleRate;
    }
    highEnergies = [];
    while (i < self.highFrequencies.length) {
      f = self.highFrequencies[i];
      highEnergies.push(register.energies[f]);
      i++;
    }
    lowEnergies = [];
    while (i < self.lowFrequencies.length) {
      freq = self.lowFrequencies[i];
      lowEnergies.push(register.energies[freq]);
      i++;
    }
    badPeaks = self.goertzel.doublePeakFilter(highEnergies, lowEnergies, self.peakFilterSensitivity);
    if (badPeaks === false) {
      if (value === self.firstPreviousValue && value !== void 0) {
        self.repeatCounter += 1;
        if (self.repeatCounter === self.repeatMin && typeof this.onDecode === 'function') {
          setTimeout(this.onDecode(value), 0);
        }
      } else {
        self.repeatCounter = 0;
        self.firstPreviousValue = value;
      }
    }
    self.goertzel.refresh();
  };
};
