// Generated by CoffeeScript 1.9.3
var Goertzel;

Goertzel = (function() {
  function Goertzel(allFrequencies, samplerate, threshold) {
    this.threshold = threshold;
    this.samplerate = samplerate;
    this.allFrequencies = allFrequencies;
    this.refresh();
  }

  Goertzel.prototype.getEnergiesFromSample = function(sample) {
    var frequency, j, len, ref;
    ref = this.allFrequencies;
    for (j = 0, len = ref.length; j < len; j++) {
      frequency = ref[j];
      this.getEnergyFromSample(sample, frequency);
    }
    return this.register;
  };

  Goertzel.prototype.getEnergyFromSample = function(sample, frequency) {
    var power, sine;
    this.register.sample = sample;
    sine = this.register.sample + this.coefficient[frequency] * this.register.firstPrevious[frequency] - this.register.secondPrevious[frequency];
    this.register.rememberSample(sine, frequency);
    this.register.filterLength[frequency] += 1;
    power = this.register.secondPrevious[frequency] * this.register.secondPrevious[frequency] + this.register.firstPrevious[frequency] * this.register.firstPrevious[frequency] - (this.coefficient[frequency] * this.register.firstPrevious[frequency] * this.register.secondPrevious[frequency]);
    this.register.totalPower[frequency] += this.register.sample * this.register.sample;
    if (this.register.totalPower[frequency] === 0) {
      this.register.totalPower[frequency] = 1;
    }
    this.register.energies[frequency] = power / this.register.totalPower[frequency] / this.register.filterLength[frequency];
    return this.register.energies[frequency];
  };

  Goertzel.prototype.refresh = function() {
    var frequency, j, len, normalizedFrequency, ref;
    this.firstPrevious = this.secondPrevious = this.totalPower = this.filterLength = this.coefficient = {};
    ref = this.allFrequencies;
    for (j = 0, len = ref.length; j < len; j++) {
      frequency = ref[j];
      normalizedFrequency = frequency / this.samplerate;
      this.coefficient[frequency] = 2.0 * Math.cos(2.0 * Math.PI * normalizedFrequency);
    }
    return this.register = new this.constructor.FrequencyRegister(this.allFrequencies);
  };

  Goertzel.Utilities = {
    floatToIntSample: function(floatSample) {
      var intSample;
      intSample = floatSample * 32768;
      if (intSample > 32767) {
        return 32767;
      } else if (intSample < -32786) {
        return -32768;
      }
      return Math.round(intSample);
    },
    downsampleBuffer: function(buffer, downsampleRate, mapSample) {
      var downsampledBuffer, i, sample;
      downsampledBuffer = [];
      i = 0;
      while (i < buffer.length) {
        sample = buffer[i];
        if (mapSample) {
          downsampledBuffer.push(mapSample(sample, i, buffer.length, downsampleRate));
        } else {
          downsampledBuffer.push(sample);
        }
        i += downsampleRate;
      }
      return downsampledBuffer;
    },
    eachDownsample: function(buffer, downsampleRate, fn) {
      var i, results, sample;
      i = 0;
      results = [];
      while (i < buffer.length) {
        sample = buffer[i];
        if (typeof fn === "function") {
          fn(sample, i, buffer.length, downsampleRate);
        }
        results.push(i += downsampleRate);
      }
      return results;
    },
    hamming: function(sample, sampleIndex, bufferSize) {
      return sample * (0.54 - 0.46 * Math.cos(2 * Math.PI * sampleIndex / bufferSize));
    },
    exactBlackman: function(sample, sampleIndex, bufferSize) {
      return sample * (0.426591 - 0.496561 * Math.cos(2 * Math.PI * sampleIndex / bufferSize) + 0.076848 * Math.cos(4 * Math.PI * sampleIndex / bufferSize));
    },
    peakFilter: function(energies, sensitivity) {
      var peak, secondPeak, thirdPeak, trough;
      energies = energies.sort().reverse();
      peak = energies[0];
      secondPeak = energies[1];
      thirdPeak = energies[2];
      trough = energies.reverse()[0];
      if (secondPeak > peak / sensitivity || thirdPeak > secondPeak / (sensitivity / 2) || trough > peak / (sensitivity / 2)) {
        return true;
      } else {
        return false;
      }
    },
    doublePeakFilter: function(energies1, energies2, sensitivity) {
      if ((self.peakFilter(energies1, sensitivity) === true) || (self.peakFilter(energies2, sensitivity) === true)) {
        return true;
      } else {
        return false;
      }
    }
  };

  Goertzel.FrequencyRegister = (function() {
    function FrequencyRegister(frequencies) {
      var frequency, j, len, ref;
      this.allFrequencies = frequencies;
      this.firstPrevious = this.secondPrevious = this.totalPower = this.filterLength = this.energies = {};
      this.sample = 0;
      ref = this.allFrequencies;
      for (j = 0, len = ref.length; j < len; j++) {
        frequency = ref[j];
        this.firstPrevious[frequency] = this.secondPrevious[frequency] = this.totalPower[frequency] = this.filterLength[frequency] = this.energies[frequency] = 0.0;
      }
    }

    FrequencyRegister.prototype.rememberSample = function(sample, frequency) {
      this.secondPrevious[frequency] = this.firstPrevious[frequency];
      return this.firstPrevious[frequency] = sample;
    };

    return FrequencyRegister;

  })();

  return Goertzel;

})();
